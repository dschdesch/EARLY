function PS = ZWOAEdistort(igerbil, idataset, alpha, m, tauslope);
% ZWOAEdistort - distort ZWOAE stimulus
%   ZWOAEdistort(igerbil, idataset, alpha, TauSlope) reproduces the 
%   stimulus used in dataset (igerbil,idataset) and analyzes the 
%   "suppression DPs" generated by two distinct types of distortion:
%       - instantaneous compression by a power law with exponent alpha
%       - the F1 envelope modulating F2 with a modulation depth m
%   In both cases, the compression follows a power law with an exponent
%   equal to alpha, that is, the I/O curves have a slope of alpha dB/dB.
%   Before subjecting the waveforms to the distortion, the individual
%   stimulus components are subjected to a frequency-dependent delay
%   decribed by input argument TauSlope [us/kHz].
%
%   See also ZWOAEstruct, getZWOAEdata.

if nargin<3, alpha=0.5; end % default: 0.5 dB/dB growth
if nargin<4, m=0.1; end % default: 10% mod depth
if nargin<5, tauslope=0; end % default: no freq-dependent delay

% get complex-analytic waveforms & stim params
[Z1, Z2, SP] = ZWOAEstimulus(igerbil, idataset);

% we do not really apply the delays to the waveforms, but incorporate ...
% ... them by adjusting the starting phases returned in SP.ph1 and SP.ph2.
F1 = SP.F1(:); % kHz
F2 = SP.F2(:); % kHz
Fpivot = mean([mean(F1), mean(F2)]);
delay1 = 1e-3*tauslope*(F1-Fpivot); % freq-dependent delay [ms] of the respective F1 components
delay2 = 1e-3*tauslope*(F2-Fpivot); % idem F2
ph1 = delayPhase(SP.ph1(:), F1, -delay1);
ph2 = delayPhase(SP.ph2(:), F2, -delay2);

% now apply the 2 types of distortion
% 1. instantaneous compression
Xi = real(Z1+Z2); % total waveform, real-valued
Xi = powerCompress(alpha, Xi);
% 2. gain control of F2 by F1
E1 = abs(Z1);
Xg = (1-m*E1).*real(Z2);

% spectral analysis
df = SP.df;
Si = fft(Xi(:));
Sg = fft(Xg(:));
MGi = A2dB(abs(Si));
PHi = angle(Si)/2/pi;
MGg = A2dB(abs(Sg));
PHg = angle(Sg)/2/pi;
% DP freqs & Phases
Msup = ZWOAEmatrices(length(F1), 'Msupall');
Fprim = [F1; F2];
Fsup = Msup*Fprim;
Phprim = [ph1; ph2]; % primary phases (pre-adjusted using tauslope)
rPhsup = Msup*Phprim; % DP reference phases
% indices
iF1 = 1+round(F1/df);
iF2 = 1+round(F2/df);
iFprim = 1+round(Fprim/df);
iFsup = 1+round(Fsup/df);
% normalize magn spectra
MGi = SP.L2 + MGi - MGi(iF2); % force F2 comp to L2 dB 
MGg = SP.L2 + MGg - MGg(iF2); % idem
% get DP phases re reference from primaries; unwrap them
dsize(PHi(iFsup), rPhsup)
PHsupi = PHi(iFsup) - rPhsup;
PHsupg = PHg(iFsup) - rPhsup;
PHsupi = ucunwrap(PHsupi, Fsup);
PHsupg = ucunwrap(PHsupg, Fsup);
% plot
set(gcf,'units', 'normalized', 'position', [0.40156 0.07625 0.59609 0.84125]);
[Fmin, Fmax] = minmax([F1; F2; Fsup]);
PS = ZWOAEplotStruct;
% Magn -- inst
subplot(2,2,1); 
dplot(df, MGi, PS.Spec);
xplot(Fprim, MGi(iFprim), PS.Prim);
xplot(Fsup, MGi(iFsup), PS.DPsupall);
title('Instaneous compression');
xlim([Fmin Fmax]);
ylim([-10 2+max(MGi)]);
% Magn -- AGC
subplot(2,2,2); 
dplot(df, MGg, PS.Spec);
xplot(Fprim, MGg(iFprim), PS.Prim);
xplot(Fsup, MGg(iFsup), PS.DPsupall);
title('Gain control');
xlim([Fmin Fmax]);
ylim([-10 2+max(MGi)]);
% Phase -- inst
subplot(2,2,3); 
plot(Fsup, PHsupi, PS.DPsupall);
xlim([Fmin Fmax]);
% Phase -- AGC
subplot(2,2,4); 
plot(Fsup, PHsupg, PS.DPsupall);
xlim([Fmin Fmax]);











