function [H,G]=dotraster(D, figh, P);
% dataset/dotraster - dot raster display of a dataset
%    dotraster(D) displays a dot raster of the spike times in dataset D.
%
%    dotraster(D,figh) uses figure handle figh for plotting
%    (default = [] -> gcf). 
%
%    dotraster(D, figh, P) uses parameters P for displaying the dotraster.
%    P is typically a dataviewparam object or a valid 2nd input argument to
%    the dataviewparam constructor method, such as a parameter filename.
%
%    Dotraster is a standard "dataviewer", meaning that it may serve as
%    viewer for online data analysis during data collection. In addition,
%    the plot generated by all dataviewers allow an interactive change of
%    analysis parameter view the Params|Edit pullodwn menu (Ctr-Q).
%    For details on dataviewers, see dataviewparam.
%
%    See also dataviewparam, dataset/enableparamedit.

% handle the special case of parameter queries. Do this immediately to 
% avoid endless recursion with dataviewparam.
if isvoid(D) && isequal('params', figh),
    [H,G] = local_ParamGUI;
    return;
end

% open a new figure or use existing one?
if nargin<2 || isempty(figh),
    open_new = isempty(get(0,'CurrentFigure'));
    figh=gcf; 
else,
    open_new = isSingleHandle(figh);
end

% parameters
if nargin<3, P = []; end
if isempty(P), % use default paremeter set for this dataviewer
    P = dataviewparam(mfilename); 
end

% delegate the real work to local fcn
H = local_dotraster(D, figh, open_new, P);

% enable parameter editing when viewing offline
if isSingleHandle(figh, 'figure'), enableparamedit(D, P, figh); end;



%============================================================
%============================================================
function data_struct = local_dotraster(D, figh, open_new, P);
% the real work for the dotraster

% Check varied stimulus Params
Pres = D.Stim.Presentation;
P = struct(P); P = P.Param;
Xval = Pres.X.PlotVal;
if has2varparams(D); % 1 or 2 independent parameters
    Yval = Pres.Y.PlotVal;
    isortPlot = local_sort(P, Xval, Yval);
else
    isortPlot = local_sort(P, Xval);
end % XXXXXX
% if Param.sortCond<0, isortPlot = isortX; % X ascending
% elseif P.sortCond>0, isortPlot = isortX(end:-1:1); % descending
% else, isortPlot = 1:numel(isortX); % order of stim pres
% end
%
% prepare plot
if isSingleHandle(figh, 'figure')
    figure(figh); clf; ah = gca;
    if open_new, placefig(figh, mfilename, D.Stim.GUIname); end % restore previous size 
else
    ah = axes('parent', figh);
end
set(ah, 'position', [0.1300 0.1100 0.72 0.815]); % slightly narrower than default to accomodate for rightaxes
set(ah, 'box', 'on', 'TickDir', 'out');

% if open_new, placefig(figh, mfilename, D.Stim.GUIname); end
dy = 0.95/Pres.Nrep; % vertical offsets between reps
dotheight = 0.9*dy; % height of "dot" = vertical line
ylim([0.9, Pres.Ncond+1]);
maxDur = max(Pres.PresDur(2:end-1));
if isempty(maxDur), maxDur = max(Pres.PresDur); end;
xlim([0 maxDur]);
set(ah, 'fontsize', 10);
set(ah, 'ytick', 0.4+(1:Pres.Npres));
set(ah,'FontSize',8);
Clab = cellify(CondLabel(D));
% set(ah, 'yticklabel', num2str(Xval(isortPlot),5));
set(ah, 'yticklabel', Clab(isortPlot));
data_struct.yticklabel = Clab(isortPlot);
data_struct.xlim = [0 maxDur];
data_struct.ylim = [0.9, Pres.Ncond+1];
data_struct.ytick = 0.4+(1:Pres.Npres);
data_struct.ylabel = [lower(Pres.X.ParName) ' (' Pres.X.ParUnit ')'];
data_struct.xlabel = 'time (ms)';
xlabel('time (ms)', 'fontsize', 10);
ylabel(ah,[lower(Pres.X.ParName) ' (' Pres.X.ParUnit ')'], 'fontsize', 10);
% get sorted spikes
TC = spiketimes(D,1,'no-unwarp');
H = [];
% axes(ah); % slow
set(gcf,'CurrentAxes',ah);
isortPlot=isortPlot(:).';
        
for i=1:numel(isortPlot(:))
    icond = isortPlot(i);
    BurstDur = max(burstdur(D,icond));
    Nspike = 0; NspikeStim = 0;
    spike_count_per_cond(i) = 0;
    for irep=1:Pres.Nrep,
        spt = TC{icond,irep}; % spike times of condition icond, repetition  irep
        % plot each spike as vertical line
        x = VectorZip(spt,spt,nan+spt); 
        y0 = 0*spt+i+(irep-1)*dy;
        y = VectorZip(y0, y0+dotheight, y0);
        plot_color = mod(i,2);
        if plot_color == 0
            plot_color = 'r';
        else
            plot_color = 'b';
        end
        h=line(x,y, 'color', plot_color);
        %h=line(x,y, 'color', ploco(icond));
        H = [H; h];
        Nspike = Nspike + numel(spt) ; 
        NspikeStim = NspikeStim + numel(spt(spt<BurstDur));
        spike_count_per_cond(i) = spike_count_per_cond(i) + NspikeStim;
        data_struct.Nspike(icond,irep) = Nspike;
        data_struct.NspikeStim(icond,irep) = NspikeStim;
        data_struct.spt{icond,irep} = spt;
        data_struct.Nrep = Pres.Nrep;
        data_struct.Ncond = numel(isortPlot(:));
    end
    Ylab{i} = [num2str(NspikeStim) '/' num2str(Nspike)];
    % plot end of stim as vertical line
    line(BurstDur*[1 1], i+[0 1], 'color', 0.7*[1 1 1], 'linewidth',2);
end

data_struct.spikeCountPerCond = spike_count_per_cond;

% Plot the spike rate curve
y=[1:length(spike_count_per_cond)]+dotheight/2;
x_lim = get(ah,'xlim');
x_lim =x_lim(2);
line(spike_count_per_cond/sum(spike_count_per_cond)*x_lim,y,'color','k','linewidth',2);

axe_top = axes ('Position', get (ah, 'Position'));
set (axe_top, 'YAxisLocation', 'right', 'XAxisLocation', 'top', ...
         'Color', 'None')
set(axe_top, 'XTickLabel',[0:.1:1]);
set(axe_top,'TickDir','out');
set(axe_top,'YTick',[]);
uistack(ah,'top');

if isSingleHandle(figh, 'figure')
    hr = rightaxes(ah, get(ah,'ytick'), Ylab);  % interferes with other online dataviewers
    ylabel(hr, 'spike count (stim/total)', 'fontsize', 10);
end
if nargout<1, clear H ; end % suppress unwanted echoing
tit = title(IDstring(D, 'full'), 'fontsize', 12, 'fontweight', 'bold', 'interpreter', 'none');
P = get(tit,'Position');
set(tit,'Position',[P(1) P(2)+.02]);
%=======================
function iSortPlot = local_sort(P, varargin)
try
    if nargin<3 % Only 1 independent parameter
        X = varargin{1};
        [dum, iSortPlot] = sort(X);
        if P.SortOrder>0
            % do nothing
        elseif P.SortOrder<0
            iSortPlot = iSortPlot(end:-1:1);
        else
            iSortPlot = 1:numel(X);
        end
    else % 2 independent parameters
        sortPlotOrig = varargin(1:2); sortPlotOrig = [sortPlotOrig{:}];
        if ischar(P.ParamOrder), P.ParamOrder = str2num(P.ParamOrder); end
        [ParamOrder, SortOrder] = SameSize(P.ParamOrder, P.SortOrder);
        X = varargin{ParamOrder(1)}; X = X(:); 
        [dum, ia, ic] = unique(X); ia = sort(ia); X = X(ia);  % now X is always "Fastest varied"
        Y = varargin{ParamOrder(2)}; Y = Y(:); 
        [dum, ia, ic] = unique(Y); ia = sort(ia); Y = Y(ia); 
        if ~(SortOrder(ParamOrder(1))==0) % not as visisted, assume ascending
            X = sort(X);
        end 
        if ~(SortOrder(ParamOrder(2))==0)
            Y = sort(Y);
        end
        if SortOrder(ParamOrder(1))<0 % descending
            X = X(end:-1:1);
        end
        if SortOrder(ParamOrder(2))<0
            Y = Y(end:-1:1);
        end
        [X, Y] = meshgrid(X,Y); X=X'; Y=Y'; X=X(:); Y=Y(:); XY = [X, Y];
        sortPlot = {XY(:,ParamOrder(1)),XY(:,ParamOrder(2))}; sortPlot = [sortPlot{:}];
        Ncond = numel(X);
        iSortPlot = zeros(1,Ncond);
        % brute linear search
        if size(sortPlotOrig,1) > Ncond
            for icond=1:Ncond
                for ipos=2:(Ncond+1)
                    if sortPlot(icond,:)==sortPlotOrig(ipos,:)
                        iSortPlot(icond) = ipos-1;
                        break;
                    end
                end
            end
        else
            for icond=1:Ncond
                for ipos=1:Ncond
                    if sortPlot(icond,:)==sortPlotOrig(ipos,:)
                        iSortPlot(icond) = ipos;
                        break;
                    end
                end
            end
        end
    end
catch
    warning('Error in dotraster.m: Something went wrong when trying to parse Params.');
    iSortPlot = 1:numel(varargin{1}); % dummy implementation
end
        
    
function [T,G] = local_ParamGUI
% Returns the GUI for specifying the analysis parameters.
Order = GUIpanel('Order','Display order');
ParamOrder = ParamQuery('ParamOrder', 'param order:','',{'[1 2]','[2 1]'}, 'posint',...
    'Order of independent parameters when sorting [1 2] = "Fastest varied" = "Fastest varied". [2 1] = conversely.', 10);
SortOrder = ParamQuery('SortOrder', 'sorting order:', '0 0', '', 'integer',...
    'Sorting order of corresponding independent parameters. (-1,0,1)=(descending, as visited, ascending)',10);
Order = add(Order, ParamOrder);
Order = add(Order, SortOrder, below(ParamOrder));
Order = marginalize(Order,[4 4]);
G = GUIpiece([mfilename '_parameters'],[],[0 0],[10 10]);
G = add(G,Order);
G = marginalize(G,[10 10]);
% list all parameters in a struct
T = VoidStruct('ParamOrder/SortOrder');
