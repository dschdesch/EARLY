function [H,G] = revcor(D,figh,P)
% dataset/revcor - reverse correlation for a dataset
%    revcor(D) calculates the reverse correlation betzeen the  spike times 
%    in dataset D and the stimulus waveform.
%
%    revcor(D,figh) uses figure handle figh for plotting
%    (default = [] -> gcf). 
%
%    revcor(D,figh,P) uses parameters P for displaying the revcor.
%    P is typically a dataviewparam object or a valid 2nd input argument to
%    the dataviewparam constructor method, such as a parameter filename.
%
%    revcor is a standard "dataviewer", meaning that it may serve as
%    viewer for online data analysis during data collection. In addition,
%    the plot generated by all dataviewers allow an interactive change of
%    analysis parameter view the Params|Edit pullodwn menu (Ctr-Q).
%    For details on dataviewers, see dataviewparam.
%
%    See also dataviewparam, dataset/enableparamedit, dataset/PSTH.

% Handle the special case of parameter queries. 
% Do this immediately to avoid endless recursion with dataviewparam.
if isvoid(D) && isequal('params', figh),
    [H,G] = local_ParamGUI;
    return;
end

% Should we open a new figure or use an existing one?
if nargin<2 || isempty(figh),
    open_new = isempty(get(0,'CurrentFigure'));
    figh = gcf; 
else
    open_new = isSingleHandle(figh);
end

% Parameters
if nargin<3, P = []; end
if isempty(P), % use default paremeter set for this dataviewer
    P = dataviewparam(mfilename); 
end

% delegate the real work to local fcn
local_revcor(D, figh, open_new, P);

% enable parameter editing when viewing offline
if isSingleHandle(figh, 'figure'), enableparamedit(D, P, figh); end;



%============================================================
%============================================================
function local_revcor(D, figh, open_new, P);
% the real work for the reverse correlation

% get stimulus parameters first
D = local_makestim(D);
S = D.Stim;
Pres = D.Stim.Presentation;

% bring correct figure to front
if isSingleHandle(figh, 'figure')
    figure(figh); clf; ah = gca;
    if open_new, placefig(figh, mfilename, D.Stim.GUIname); end % restore previous size 
else
    ah = axes('parent', figh);
end

% Check varied stimulus Params
P = struct(P); P = P.Param;
isortPlot = P.iCond(P.iCond<=Pres.Ncond); % limit to actual Ncond
if isortPlot==0, isortPlot = 1:Pres.Ncond; end;
Ncond = numel(isortPlot);
AW = P.Anwin;
maxDelay = P.maxDelay;
% XXXXXX

% prepare plot
Clab = cellify(CondLabel(D)); % labels corresponding to isortPlot
LegStr = cell([Ncond 2]);
BFStr = cell([Ncond 2]);
[axh, Lh, Bh] = plotpanes(Ncond+1, 1/2, figh);

% get sorted spikes 
Chan = 1; % digital input
TC = spiketimes(D, Chan, 'no-unwarp');

% PSTH/xcorr method as described in Carney et al., 1999
t = cell(Ncond,1);
H = cell(Ncond,2);
isortPlot = isortPlot(:).';
for i=1:Ncond
    icond = isortPlot(i);
    BurstDur = max(burstdur(D,icond));
    if isequal('burstdur', AW), aw = [0 BurstDur]; else aw = AW; end
    spt = [TC{icond,:}]; % spike times of condition icond
    [x, dt] = samples(S.Waveform(icond,:)); % in case of a left/right pair, this is a Nx2 matrix 
    maxLag = round(maxDelay/dt);
    t{i} = (0:maxLag)'*dt;
    BinEdges = aw(1):dt:aw(2); % histogram bins; bin width must match stimulus sampling interval
    N = local_histogram(BinEdges, spt, aw); % column PSTH
    x = x(1:size(N,1),:); % ignore rest of waveform
    for ichan=1:size(x,2)
        [xc, lags] = xcorr(N, x(:,local_ichan(ichan)), maxLag);
        xc = xc(lags >= 0 & lags <= maxLag);
        xc = smooth(xc,3);
        H{i,ichan} = xc; % store in H
        BFStr{i,ichan} = ['BF: ' num2str(local_BF(xc,1e3/dt)) ' Hz'];
        LegStr{i,ichan} = S.Waveform(icond,ichan).DAchan;
    end
end
% normalize all waveforms so that -1 < amplitude < 1
maxy = max(max(abs([H{:}])));
H = cellfun(@(c)(c/maxy),H,'UniformOutput',false);

% plot
for i=1:Ncond
    icond = isortPlot(i);
    h = axh(i); % current axes handle
    axes(h);
    plot(h,t{i},H{i,1},'blue');  
    text(0.1, 0.1, BFStr{i,1}, 'units', 'normalized', 'color', 'blue', 'fontsize', 12 , 'interpreter', 'latex');
    hold on;
    if ~isempty(H{i,2})
        plot(h,t{i},H{i,2},'red'); 
        text(0.1, 0.2, BFStr{i,2}, 'units', 'normalized', 'color', 'red', 'fontsize', 12 , 'interpreter', 'latex');
        legend(h, LegStr{i,:});
    else
        legend(h, LegStr{i,1})
    end
    title(h, Clab{icond});
    xlim(h, [0 maxDelay]);
    ylim(h, [-1 1]);
end
Xlabels(Bh,'time (ms)','fontsize',10);
Ylabels(Lh,'amplitude','fontsize',10);
axes(axh(end)); text(0.1, 0.5, IDstring(D, 'full'), 'fontsize', 12, 'fontweight', 'bold','interpreter','none');
if nargout<1, clear H ; end % suppress unwanted echoing

function ichan = local_ichan(ichan);
if ichan == 1
    ichan = 1;
else
    ichan = 2;
end

function D = local_makestim(D)
W = D.Stim.Waveform;
okay = 1;
[Ncond Nchan] = size(W);
for i=1:Ncond
    for j=1:Nchan
        if isempty(samples(W(i,j))), okay = 0; break; end;
    end
    if ~okay; break; end;
end
if okay, return; end; % samples were saved previously; else...
paramview(D); % ...get the stimulus parameters GUI of dataset D
figh = gcg;
% make sure the NoiseSeed is the same as before, so that the noise can be
% duplicated
% Q = getGUIdata(figh,'Query',[]);
% for ii=1:numel(Q)
%     q = Q(ii);
%     if ~isequal(q.Name,'NoiseSeed')
%         continue
%     else
%         he = getFieldOrDefault(q.uiHandles, 'Edit', []);
%         set(he,'string', num2str(D.Stim.NoiseSeed));
%         break
%     end
% end
P = GUIval(figh);
P.StimType = struct(D).Stim.StimType;
P.Experiment = struct(D).Stim.Experiment;
setGUIdata(figh,'Experiment',P.Experiment);
P.handle.GUIfig = figh;
P = feval(fhandle(['makestim' P.StimType]), P); % makestim
GUIclose(figh);
D.Stim.Waveform = P.Waveform;
% save D in MAT format
% save([fileprefix(D) '.EarlyDS'], 'D', '-mat');


function N = local_histogram(BinEdges, Spt, Anwin)
%    See also dataset/PSTH.
Spt = AnWin(Spt, Anwin);
if isempty(Spt)
    Spt = Inf; 
end % to avoid crash dump but still use histc
N = histc(Spt, BinEdges);
N(end) = []; % remove last garbage bin
N = N(:);

function BF = local_BF(x,Fsam)
N = 2^nextpow2(numel(x));
X = fft(x,N);
[Xmax,I] = max(abs(X(1:N/2+1)));
f = Fsam/2*linspace(0,1,N/2+1);
BF = f(I);


function [T,G] = local_ParamGUI
% Returns the GUI for specifying the analysis parameters.
P = GUIpanel('revcor','');
iCond = ParamQuery('iCond', 'iCond:', '0', '', 'integer',...
    'Condition indices for which to calculate the CV. 0 means: all conditions.', 20);
Anwin = ParamQuery('Anwin', 'analysis window:', 'burstdur', '', 'anwin',...
    'Analysis window (in ms) [t0 t1] re the stimulus onset. The string "burstdur" means [0 t], in which t is the burst duration of the stimulus.');
maxDelay = ParamQuery('maxDelay', 'max delay:', '20', '', 'integer',...
    'Maximum delay (in ms) considered in computing the reverse correlation. 0 means: t, in which t is the burst duration of the stimulus.',1);
P = add(P, iCond);
P = add(P, Anwin, below(iCond));
P = add(P, maxDelay, below(Anwin));
P = marginalize(P,[4 4]);
G = GUIpiece([mfilename '_parameters'],[],[0 0],[10 10]);
G = add(G,P);
G = marginalize(G,[10 10]);
% list all parameters in a struct
T = VoidStruct('iCond/Anwin/maxDelay');
